window.log = function f() {
  log.history = log.history || [], log.history.push(arguments);
  if (this.console) {
    var args = arguments, newarr;
    args.callee = args.callee.caller, newarr = [].slice.call(args), typeof console.log == "object" ? log.apply.call(console.log, console, newarr) : console.log.apply(console, newarr);
  }
}, function(a) {
  function b() {}
  for (var c = "assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn".split(","), d; !!(d = c.pop()); ) a[d] = a[d] || b;
}(function() {
  try {
    return console.log(), window.console;
  } catch (a) {
    return window.console = {};
  }
}()), function($) {
  $.fn.fitText = function(kompressor, options) {
    var settings = {
      minFontSize: Number.NEGATIVE_INFINITY,
      maxFontSize: Number.POSITIVE_INFINITY
    };
    return this.each(function() {
      var $this = $(this), compressor = kompressor || 1;
      options && $.extend(settings, options);
      var resizer = function() {
        $this.css("font-size", Math.max(Math.min($this.width() / (compressor * 10), parseFloat(settings.maxFontSize)), parseFloat(settings.minFontSize)));
      };
      resizer(), $(window).resize(resizer);
    });
  };
}(jQuery), !function($) {
  "use strict";
  var Tooltip = function(element, options) {
    this.init("tooltip", element, options);
  };
  Tooltip.prototype = {
    constructor: Tooltip,
    init: function(type, element, options) {
      var eventIn, eventOut;
      this.type = type, this.$element = $(element), this.options = this.getOptions(options), this.enabled = !0, this.options.trigger != "manual" && (eventIn = this.options.trigger == "hover" ? "mouseenter" : "focus", eventOut = this.options.trigger == "hover" ? "mouseleave" : "blur", this.$element.on(eventIn, this.options.selector, $.proxy(this.enter, this)), this.$element.on(eventOut, this.options.selector, $.proxy(this.leave, this))), this.options.selector ? this._options = $.extend({}, this.options, {
        trigger: "manual",
        selector: ""
      }) : this.fixTitle();
    },
    getOptions: function(options) {
      return options = $.extend({}, $.fn[this.type].defaults, options, this.$element.data()), options.delay && typeof options.delay == "number" && (options.delay = {
        show: options.delay,
        hide: options.delay
      }), options;
    },
    enter: function(e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type);
      if (!self.options.delay || !self.options.delay.show) return self.show();
      clearTimeout(this.timeout), self.hoverState = "in", this.timeout = setTimeout(function() {
        self.hoverState == "in" && self.show();
      }, self.options.delay.show);
    },
    leave: function(e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type);
      this.timeout && clearTimeout(this.timeout);
      if (!self.options.delay || !self.options.delay.hide) return self.hide();
      self.hoverState = "out", this.timeout = setTimeout(function() {
        self.hoverState == "out" && self.hide();
      }, self.options.delay.hide);
    },
    show: function() {
      var $tip, inside, pos, actualWidth, actualHeight, placement, tp;
      if (this.hasContent() && this.enabled) {
        $tip = this.tip(), this.setContent(), this.options.animation && $tip.addClass("fade"), placement = typeof this.options.placement == "function" ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement, inside = /in/.test(placement), $tip.remove().css({
          top: 0,
          left: 0,
          display: "block"
        }).appendTo(inside ? this.$element : document.body), pos = this.getPosition(inside), actualWidth = $tip[0].offsetWidth, actualHeight = $tip[0].offsetHeight;
        switch (inside ? placement.split(" ")[1] : placement) {
         case "bottom":
          tp = {
            top: pos.top + pos.height,
            left: pos.left + pos.width / 2 - actualWidth / 2
          };
          break;
         case "top":
          tp = {
            top: pos.top - actualHeight,
            left: pos.left + pos.width / 2 - actualWidth / 2
          };
          break;
         case "left":
          tp = {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left - actualWidth
          };
          break;
         case "right":
          tp = {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left + pos.width
          };
        }
        $tip.css(tp).addClass(placement).addClass("in");
      }
    },
    isHTML: function(text) {
      return typeof text != "string" || text.charAt(0) === "<" && text.charAt(text.length - 1) === ">" && text.length >= 3 || /^(?:[^<]*<[\w\W]+>[^>]*$)/.exec(text);
    },
    setContent: function() {
      var $tip = this.tip(), title = this.getTitle();
      $tip.find(".tooltip-inner")[this.isHTML(title) ? "html" : "text"](title), $tip.removeClass("fade in top bottom left right");
    },
    hide: function() {
      function removeWithAnimation() {
        var timeout = setTimeout(function() {
          $tip.off($.support.transition.end).remove();
        }, 500);
        $tip.one($.support.transition.end, function() {
          clearTimeout(timeout), $tip.remove();
        });
      }
      var that = this, $tip = this.tip();
      $tip.removeClass("in"), $.support.transition && this.$tip.hasClass("fade") ? removeWithAnimation() : $tip.remove();
    },
    fixTitle: function() {
      var $e = this.$element;
      ($e.attr("title") || typeof $e.attr("data-original-title") != "string") && $e.attr("data-original-title", $e.attr("title") || "").removeAttr("title");
    },
    hasContent: function() {
      return this.getTitle();
    },
    getPosition: function(inside) {
      return $.extend({}, inside ? {
        top: 0,
        left: 0
      } : this.$element.offset(), {
        width: this.$element[0].offsetWidth,
        height: this.$element[0].offsetHeight
      });
    },
    getTitle: function() {
      var title, $e = this.$element, o = this.options;
      return title = $e.attr("data-original-title") || (typeof o.title == "function" ? o.title.call($e[0]) : o.title), title;
    },
    tip: function() {
      return this.$tip = this.$tip || $(this.options.template);
    },
    validate: function() {
      this.$element[0].parentNode || (this.hide(), this.$element = null, this.options = null);
    },
    enable: function() {
      this.enabled = !0;
    },
    disable: function() {
      this.enabled = !1;
    },
    toggleEnabled: function() {
      this.enabled = !this.enabled;
    },
    toggle: function() {
      this[this.tip().hasClass("in") ? "hide" : "show"]();
    }
  }, $.fn.tooltip = function(option) {
    return this.each(function() {
      var $this = $(this), data = $this.data("tooltip"), options = typeof option == "object" && option;
      data || $this.data("tooltip", data = new Tooltip(this, options)), typeof option == "string" && data[option]();
    });
  }, $.fn.tooltip.Constructor = Tooltip, $.fn.tooltip.defaults = {
    animation: !0,
    placement: "top",
    selector: !1,
    template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: "hover",
    title: "",
    delay: 0
  };
}(window.jQuery), !function($) {
  "use strict";
  function hideWithTransition() {
    var that = this, timeout = setTimeout(function() {
      that.$element.off($.support.transition.end), hideModal.call(that);
    }, 500);
    this.$element.one($.support.transition.end, function() {
      clearTimeout(timeout), hideModal.call(that);
    });
  }
  function hideModal(that) {
    this.$element.hide().trigger("hidden"), backdrop.call(this);
  }
  function backdrop(callback) {
    var that = this, animate = this.$element.hasClass("fade") ? "fade" : "";
    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;
      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body), this.options.backdrop != "static" && this.$backdrop.click($.proxy(this.hide, this)), doAnimate && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), doAnimate ? this.$backdrop.one($.support.transition.end, callback) : callback();
    } else !this.isShown && this.$backdrop ? (this.$backdrop.removeClass("in"), $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one($.support.transition.end, $.proxy(removeBackdrop, this)) : removeBackdrop.call(this)) : callback && callback();
  }
  function removeBackdrop() {
    this.$backdrop.remove(), this.$backdrop = null;
  }
  function escape() {
    var that = this;
    this.isShown && this.options.keyboard ? $(document).on("keyup.dismiss.modal", function(e) {
      e.which == 27 && that.hide();
    }) : this.isShown || $(document).off("keyup.dismiss.modal");
  }
  var Modal = function(content, options) {
    this.options = options, this.$element = $(content).delegate('[data-dismiss="modal"]', "click.dismiss.modal", $.proxy(this.hide, this));
  };
  Modal.prototype = {
    constructor: Modal,
    toggle: function() {
      return this[this.isShown ? "hide" : "show"]();
    },
    show: function() {
      var that = this, e = $.Event("show");
      this.$element.trigger(e);
      if (this.isShown || e.isDefaultPrevented()) return;
      $("body").addClass("modal-open"), this.isShown = !0, escape.call(this), backdrop.call(this, function() {
        var transition = $.support.transition && that.$element.hasClass("fade");
        that.$element.parent().length || that.$element.appendTo(document.body), that.$element.show(), transition && that.$element[0].offsetWidth, that.$element.addClass("in"), transition ? that.$element.one($.support.transition.end, function() {
          that.$element.trigger("shown");
        }) : that.$element.trigger("shown");
      });
    },
    hide: function(e) {
      e && e.preventDefault();
      var that = this;
      e = $.Event("hide"), this.$element.trigger(e);
      if (!this.isShown || e.isDefaultPrevented()) return;
      this.isShown = !1, $("body").removeClass("modal-open"), escape.call(this), this.$element.removeClass("in"), $.support.transition && this.$element.hasClass("fade") ? hideWithTransition.call(this) : hideModal.call(this);
    }
  }, $.fn.modal = function(option) {
    return this.each(function() {
      var $this = $(this), data = $this.data("modal"), options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == "object" && option);
      data || $this.data("modal", data = new Modal(this, options)), typeof option == "string" ? data[option]() : options.show && data.show();
    });
  }, $.fn.modal.defaults = {
    backdrop: !0,
    keyboard: !0,
    show: !0
  }, $.fn.modal.Constructor = Modal, $(function() {
    $("body").on("click.modal.data-api", '[data-toggle="modal"]', function(e) {
      var $this = $(this), href, $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "")), option = $target.data("modal") ? "toggle" : $.extend({}, $target.data(), $this.data());
      e.preventDefault(), $target.modal(option);
    });
  });
}(window.jQuery);

var Froogaloop = function() {
  function Froogaloop(iframe) {
    return new Froogaloop.fn.init(iframe);
  }
  function postMessage(method, params, target) {
    if (!target.contentWindow.postMessage) return !1;
    var url = target.getAttribute("src").split("?")[0], data = JSON.stringify({
      method: method,
      value: params
    });
    url.substr(0, 2) === "//" && (url = window.location.protocol + url), target.contentWindow.postMessage(data, url);
  }
  function onMessageReceived(event) {
    var data, method;
    try {
      data = JSON.parse(event.data), method = data.event || data.method;
    } catch (e) {}
    method == "ready" && !isReady && (isReady = !0);
    if (event.origin != playerDomain) return !1;
    var value = data.value, eventData = data.data, target_id = target_id === "" ? null : data.player_id, callback = getCallback(method, target_id), params = [];
    return callback ? (value !== undefined && params.push(value), eventData && params.push(eventData), target_id && params.push(target_id), params.length > 0 ? callback.apply(null, params) : callback.call()) : !1;
  }
  function storeCallback(eventName, callback, target_id) {
    target_id ? (eventCallbacks[target_id] || (eventCallbacks[target_id] = {}), eventCallbacks[target_id][eventName] = callback) : eventCallbacks[eventName] = callback;
  }
  function getCallback(eventName, target_id) {
    return target_id ? eventCallbacks[target_id][eventName] : eventCallbacks[eventName];
  }
  function removeCallback(eventName, target_id) {
    if (target_id && eventCallbacks[target_id]) {
      if (!eventCallbacks[target_id][eventName]) return !1;
      eventCallbacks[target_id][eventName] = null;
    } else {
      if (!eventCallbacks[eventName]) return !1;
      eventCallbacks[eventName] = null;
    }
    return !0;
  }
  function getDomainFromUrl(url) {
    url.substr(0, 2) === "//" && (url = window.location.protocol + url);
    var url_pieces = url.split("/"), domain_str = "";
    for (var i = 0, length = url_pieces.length; i < length; i++) {
      if (!(i < 3)) break;
      domain_str += url_pieces[i], i < 2 && (domain_str += "/");
    }
    return domain_str;
  }
  function isFunction(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
  }
  function isArray(obj) {
    return toString.call(obj) === "[object Array]";
  }
  var eventCallbacks = {}, hasWindowEvent = !1, isReady = !1, slice = Array.prototype.slice, playerDomain = "";
  return Froogaloop.fn = Froogaloop.prototype = {
    element: null,
    init: function(iframe) {
      return typeof iframe == "string" && (iframe = document.getElementById(iframe)), this.element = iframe, playerDomain = getDomainFromUrl(this.element.getAttribute("src")), this;
    },
    api: function(method, valueOrCallback) {
      if (!this.element || !method) return !1;
      var self = this, element = self.element, target_id = element.id !== "" ? element.id : null, params = isFunction(valueOrCallback) ? null : valueOrCallback, callback = isFunction(valueOrCallback) ? valueOrCallback : null;
      return callback && storeCallback(method, callback, target_id), postMessage(method, params, element), self;
    },
    addEvent: function(eventName, callback) {
      if (!this.element) return !1;
      var self = this, element = self.element, target_id = element.id !== "" ? element.id : null;
      return storeCallback(eventName, callback, target_id), eventName != "ready" ? postMessage("addEventListener", eventName, element) : eventName == "ready" && isReady && callback.call(null, target_id), self;
    },
    removeEvent: function(eventName) {
      if (!this.element) return !1;
      var self = this, element = self.element, target_id = element.id !== "" ? element.id : null, removed = removeCallback(eventName, target_id);
      eventName != "ready" && removed && postMessage("removeEventListener", eventName, element);
    }
  }, Froogaloop.fn.init.prototype = Froogaloop.fn, window.addEventListener ? window.addEventListener("message", onMessageReceived, !1) : window.attachEvent("onmessage", onMessageReceived), window.Froogaloop = window.$f = Froogaloop;
}();

jQuery.easing.jswing = jQuery.easing.swing, jQuery.extend(jQuery.easing, {
  def: "easeOutQuad",
  swing: function(x, t, b, c, d) {
    return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
  },
  easeInOutQuad: function(x, t, b, c, d) {
    return (t /= d / 2) < 1 ? c / 2 * t * t + b : -c / 2 * (--t * (t - 2) - 1) + b;
  },
  easeInOutQuart: function(x, t, b, c, d) {
    return (t /= d / 2) < 1 ? c / 2 * t * t * t * t + b : -c / 2 * ((t -= 2) * t * t * t - 2) + b;
  },
  easeInOutQuint: function(x, t, b, c, d) {
    return (t /= d / 2) < 1 ? c / 2 * t * t * t * t * t + b : c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
  },
  easeInOutSine: function(x, t, b, c, d) {
    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
  },
  easeInOutBounce: function(x, t, b, c, d) {
    return t < d / 2 ? jQuery.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b : jQuery.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
  }
});